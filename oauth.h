/* oauth.h generated by valac 0.14.0, the Vala compiler, do not modify */


#ifndef __OAUTH_H__
#define __OAUTH_H__

#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <glib-object.h>
#include <gee.h>

G_BEGIN_DECLS


#define OAUTH_TYPE_CLIENT (oauth_client_get_type ())
#define OAUTH_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OAUTH_TYPE_CLIENT, OAuthClient))
#define OAUTH_CLIENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OAUTH_TYPE_CLIENT, OAuthClientClass))
#define OAUTH_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OAUTH_TYPE_CLIENT))
#define OAUTH_IS_CLIENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OAUTH_TYPE_CLIENT))
#define OAUTH_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OAUTH_TYPE_CLIENT, OAuthClientClass))

typedef struct _OAuthClient OAuthClient;
typedef struct _OAuthClientClass OAuthClientClass;
typedef struct _OAuthClientPrivate OAuthClientPrivate;

#define OAUTH_TYPE_ISIGNATURE_METHOD (oauth_isignature_method_get_type ())
#define OAUTH_ISIGNATURE_METHOD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OAUTH_TYPE_ISIGNATURE_METHOD, OAuthISignatureMethod))
#define OAUTH_IS_ISIGNATURE_METHOD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OAUTH_TYPE_ISIGNATURE_METHOD))
#define OAUTH_ISIGNATURE_METHOD_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), OAUTH_TYPE_ISIGNATURE_METHOD, OAuthISignatureMethodIface))

typedef struct _OAuthISignatureMethod OAuthISignatureMethod;
typedef struct _OAuthISignatureMethodIface OAuthISignatureMethodIface;

#define OAUTH_TYPE_PLAINTEXT (oauth_plaintext_get_type ())
#define OAUTH_PLAINTEXT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OAUTH_TYPE_PLAINTEXT, OAuthPLAINTEXT))
#define OAUTH_PLAINTEXT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OAUTH_TYPE_PLAINTEXT, OAuthPLAINTEXTClass))
#define OAUTH_IS_PLAINTEXT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OAUTH_TYPE_PLAINTEXT))
#define OAUTH_IS_PLAINTEXT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OAUTH_TYPE_PLAINTEXT))
#define OAUTH_PLAINTEXT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OAUTH_TYPE_PLAINTEXT, OAuthPLAINTEXTClass))

typedef struct _OAuthPLAINTEXT OAuthPLAINTEXT;
typedef struct _OAuthPLAINTEXTClass OAuthPLAINTEXTClass;
typedef struct _OAuthPLAINTEXTPrivate OAuthPLAINTEXTPrivate;

#define OAUTH_TYPE_HMAC_SHA1 (oauth_hmac_sha1_get_type ())
#define OAUTH_HMAC_SHA1(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OAUTH_TYPE_HMAC_SHA1, OAuthHMAC_SHA1))
#define OAUTH_HMAC_SHA1_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OAUTH_TYPE_HMAC_SHA1, OAuthHMAC_SHA1Class))
#define OAUTH_IS_HMAC_SHA1(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OAUTH_TYPE_HMAC_SHA1))
#define OAUTH_IS_HMAC_SHA1_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OAUTH_TYPE_HMAC_SHA1))
#define OAUTH_HMAC_SHA1_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OAUTH_TYPE_HMAC_SHA1, OAuthHMAC_SHA1Class))

typedef struct _OAuthHMAC_SHA1 OAuthHMAC_SHA1;
typedef struct _OAuthHMAC_SHA1Class OAuthHMAC_SHA1Class;
typedef struct _OAuthHMAC_SHA1Private OAuthHMAC_SHA1Private;

typedef enum  {
	OAUTH_ERROR_INVALID_ARGUMENT
} OAuthError;
#define OAUTH_ERROR oauth_error_quark ()
struct _OAuthClient {
	GObject parent_instance;
	OAuthClientPrivate * priv;
};

struct _OAuthClientClass {
	GObjectClass parent_class;
};

struct _OAuthISignatureMethodIface {
	GTypeInterface parent_iface;
	gchar* (*sign) (OAuthISignatureMethod* self, const gchar* token_secret, const gchar* sig_base);
	gchar* (*to_string) (OAuthISignatureMethod* self);
};

struct _OAuthPLAINTEXT {
	GObject parent_instance;
	OAuthPLAINTEXTPrivate * priv;
};

struct _OAuthPLAINTEXTClass {
	GObjectClass parent_class;
};

struct _OAuthHMAC_SHA1 {
	GObject parent_instance;
	OAuthHMAC_SHA1Private * priv;
};

struct _OAuthHMAC_SHA1Class {
	GObjectClass parent_class;
};


#define OAUTH_VERSION "1.0"
GQuark oauth_error_quark (void);
GType oauth_client_get_type (void) G_GNUC_CONST;
GType oauth_isignature_method_get_type (void) G_GNUC_CONST;
OAuthClient* oauth_client_new (const gchar* realm, const gchar* oauth_consumer_key, OAuthISignatureMethod* sigmeth);
OAuthClient* oauth_client_construct (GType object_type, const gchar* realm, const gchar* oauth_consumer_key, OAuthISignatureMethod* sigmeth);
GeeMap* oauth_client_request_token (OAuthClient* self, const gchar* http_method, const gchar* request_endpoint_uri, const gchar* oauth_callback);
gchar* oauth_client_auth_token (OAuthClient* self, const gchar* auth_endpoint_uri_template, const gchar* oauth_token, const gchar* oauth_token_secret, const gchar* oauth_callback_confirmed, GError** error);
gchar* oauth_client_get_oauth_token (OAuthClient* self);
GeeMap* oauth_client_access_token (OAuthClient* self, const gchar* http_method, const gchar* access_endpoint_uri, const gchar* oauth_token, const gchar* oauth_verifier, GError** error);
void oauth_client_set_token (OAuthClient* self, const gchar* oauth_token, const gchar* oauth_token_secret);
GeeMap* oauth_client_authenticate (OAuthClient* self, const gchar* http_method, const gchar* uri, GeeMultiMap* args_);
gchar* oauth_isignature_method_sign (OAuthISignatureMethod* self, const gchar* token_secret, const gchar* sig_base);
gchar* oauth_isignature_method_to_string (OAuthISignatureMethod* self);
GType oauth_plaintext_get_type (void) G_GNUC_CONST;
OAuthPLAINTEXT* oauth_plaintext_new (const gchar* secret);
OAuthPLAINTEXT* oauth_plaintext_construct (GType object_type, const gchar* secret);
GType oauth_hmac_sha1_get_type (void) G_GNUC_CONST;
OAuthHMAC_SHA1* oauth_hmac_sha1_new (const gchar* secret);
OAuthHMAC_SHA1* oauth_hmac_sha1_construct (GType object_type, const gchar* secret);
void oauth_sanity_check (void);


G_END_DECLS

#endif
